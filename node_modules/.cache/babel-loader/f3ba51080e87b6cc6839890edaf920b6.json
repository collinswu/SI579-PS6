{"ast":null,"code":"import _toConsumableArray from\"/Users/wenjiewu/Desktop/hw6/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _createForOfIteratorHelper from\"/Users/wenjiewu/Desktop/hw6/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/Users/wenjiewu/Desktop/hw6/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import SavedWords from\"./SavedWords\";import RhymeButton from\"./RhymeButton\";import SynonymsButton from\"./SynonymsButton\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var OutputList=function OutputList(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),inputWords=_useState2[0],setInputWords=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),outputWord=_useState4[0],setOutputWord=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),savedWords=_useState6[0],setSavedWords=_useState6[1];function groupBy(objects,property){// If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n// value for property (obj[property])\nif(typeof property!=='function'){var propName=property;property=function property(obj){return obj[propName];};}var groupedObjects=new Map();// Keys: group names, value: list of items in that group\nvar _iterator=_createForOfIteratorHelper(objects),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var object=_step.value;var groupName=property(object);//Make sure that the group exists\nif(!groupedObjects.has(groupName)){groupedObjects.set(groupName,[]);}groupedObjects.get(groupName).push(object);}// Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n}catch(err){_iterator.e(err);}finally{_iterator.f();}var result={};var _iterator2=_createForOfIteratorHelper(Array.from(groupedObjects.keys()).sort()),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var key=_step2.value;result[key]=groupedObjects.get(key);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return result;};function getDatamuseRhymeUrl(rel_rhy){return\"https://api.datamuse.com/words?\".concat(new URLSearchParams({'rel_rhy':inputWords}).toString());}var datamuseRequest=function datamuseRequest(url,callback){setOutputWord(function(){return/*#__PURE__*/_jsx(\"p\",{children:\"...Loading\"});});fetch(url).then(function(response){return response.json();}).then(function(data){// This invokes the callback that updates the page.\ncallback(data);},function(err){console.error(err);});};function generateWords(term){console.log(\"0000\",term);var wordlist=term.map(function(words){// console.log(\"wwww\",words.word);\nreturn/*#__PURE__*/_jsxs(\"li\",{children:[words.word,\" \",/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return addToSavedWords(words.word);},type:\"button\",className:\"btn btn-secondary\",children:\"(save)\"}),\" \"]},\"wd\"+words.word);});return wordlist;}var rhyme=function rhyme(result){// console.log(\"reult here!!!\",result);\nvar groupOutput=groupBy(result,\"numSyllables\");// console.log(\"!!!!\",Object.entries(groupOutput));\nvar wordToShow=[];if(result.length!==0){wordToShow.push(/*#__PURE__*/_jsxs(\"h2\",{children:[\"Words that rhyme with \",inputWords,\": \"]},\"title\"));Object.entries(groupOutput).map(function(_ref,index){var _ref2=_slicedToArray(_ref,2),numSyllables=_ref2[0],items=_ref2[1];// console.log(\"@@@@\",items);\nwordToShow.push(/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Syllables: \",numSyllables,\" \"]},'title'+index),/*#__PURE__*/_jsx(\"ul\",{children:generateWords(items)},'ul'+index)]},index));});}else{wordToShow.push(/*#__PURE__*/_jsx(\"p\",{children:\"(no results)\"}));}setOutputWord(wordToShow);};function addToSavedWords(item){setSavedWords(function(previousList){// console.log(previousList)\nreturn[].concat(_toConsumableArray(previousList),[item]);});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(SavedWords,{savedWords:savedWords})}),/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"input-group col\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",type:\"text\",placeholder:\"Enter a word\",onChange:function onChange(e){setInputWords(e.target.value);// console.log(e.target.value);\n},onKeyDown:function onKeyDown(e){if(e.key===\"Enter\"){// console.log(inputWords);\n// console.log(`https://api.datamuse.com/words?rel_rhy=${inputWords}`);\ndatamuseRequest(getDatamuseRhymeUrl(inputWords),rhyme);}}}),/*#__PURE__*/_jsx(RhymeButton,{inputWords:inputWords,rhyme:rhyme,datamuseRequest:datamuseRequest,getDatamuseRhymeUrl:getDatamuseRhymeUrl}),/*#__PURE__*/_jsx(SynonymsButton,{inputWords:inputWords,datamuseRequest:datamuseRequest,generateWords:generateWords,setOutputWord:setOutputWord})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"col\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"output row\",children:/*#__PURE__*/_jsx(\"output\",{className:\"col\",children:outputWord})})]});};export default OutputList;","map":{"version":3,"sources":["/Users/wenjiewu/Desktop/hw6/src/components/Output.js"],"names":["useState","SavedWords","RhymeButton","SynonymsButton","OutputList","inputWords","setInputWords","outputWord","setOutputWord","savedWords","setSavedWords","groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","getDatamuseRhymeUrl","rel_rhy","URLSearchParams","toString","datamuseRequest","url","callback","fetch","then","response","json","data","err","console","error","generateWords","term","log","wordlist","map","words","word","addToSavedWords","rhyme","groupOutput","wordToShow","length","Object","entries","index","numSyllables","items","item","previousList","e","target","value"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport SavedWords from \"./SavedWords\"\nimport RhymeButton from \"./RhymeButton\"\nimport SynonymsButton from \"./SynonymsButton\"\n\nconst OutputList = () => {\n    const [inputWords, setInputWords] = useState();\n    const [outputWord, setOutputWord] = useState();\n    const [savedWords, setSavedWords] = useState([]);\n\n    function groupBy(objects, property){\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if(typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for(const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if(!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    };\n\n    function getDatamuseRhymeUrl(rel_rhy) {\n        return `https://api.datamuse.com/words?${(new URLSearchParams({'rel_rhy': inputWords})).toString()}`;\n    }\n\n    const datamuseRequest = (url, callback) => {\n        setOutputWord(()=>{\n            return <p>...Loading</p>\n        });\n        fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                // This invokes the callback that updates the page.\n                callback(data);\n            }, (err) => {\n                console.error(err);\n            });\n    };\n\n\n\n    function generateWords(term) {\n        console.log(\"0000\",term);\n        const wordlist = term.map((words)=>{\n            // console.log(\"wwww\",words.word);\n            return <li key={\"wd\"+words.word}>{words.word} <button onClick={()=>addToSavedWords(words.word)} type=\"button\" className=\"btn btn-secondary\">(save)</button> </li>\n        });\n        return wordlist;\n    }\n\n\n    const rhyme = (result) => {\n        // console.log(\"reult here!!!\",result);\n        const groupOutput = groupBy(result,\"numSyllables\");\n        // console.log(\"!!!!\",Object.entries(groupOutput));\n        const wordToShow = [];\n        if (result.length !== 0) {\n            wordToShow.push(<h2 key=\"title\">Words that rhyme with {inputWords}: </h2>);\n            Object.entries(groupOutput).map(([numSyllables,items],index)=>{\n                // console.log(\"@@@@\",items);\n                wordToShow.push(\n                    <div key={index}>\n                        <h3 key={'title'+index}>Syllables: {numSyllables} </h3>\n                        <ul key={'ul'+index}>\n                            {generateWords(items)}\n                        </ul>\n                    </div>\n                )\n            })\n        } else {\n            wordToShow.push(<p>(no results)</p>);\n        }\n        setOutputWord(wordToShow);\n    };\n\n    function addToSavedWords(item) {\n        setSavedWords((previousList)=> {\n            // console.log(previousList)\n            return [...previousList,item]\n        })\n    };\n\n    return (\n        <>\n            <div className=\"row\">\n                <SavedWords savedWords={savedWords}/>\n            </div>\n            <div className=\"row\">\n                <div className=\"input-group col\">\n                    <input className=\"form-control\" type=\"text\" placeholder=\"Enter a word\"\n                           onChange={(e)=>{\n                               setInputWords(e.target.value);\n                               // console.log(e.target.value);\n                           }}\n\n                           onKeyDown={(e) => {\n                               if (e.key===\"Enter\"){\n                                   // console.log(inputWords);\n                                   // console.log(`https://api.datamuse.com/words?rel_rhy=${inputWords}`);\n                                   datamuseRequest(getDatamuseRhymeUrl(inputWords),rhyme);\n                               }}}\n                    />\n                    <RhymeButton\n                        inputWords={inputWords}\n                        rhyme={rhyme}\n                        datamuseRequest={datamuseRequest}\n                        getDatamuseRhymeUrl={getDatamuseRhymeUrl}\n                    />\n                    <SynonymsButton\n                        inputWords={inputWords}\n                        datamuseRequest={datamuseRequest}\n                        generateWords={generateWords}\n                        setOutputWord={setOutputWord}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <h2 className=\"col\"></h2>\n            </div>\n            <div className=\"output row\">\n                <output className=\"col\">{outputWord}</output>\n            </div>\n        </>\n    )\n}\n\nexport default OutputList;"]},"metadata":{},"sourceType":"module"}