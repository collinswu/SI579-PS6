{"ast":null,"code":"var _jsxFileName = \"/Users/wenjiewu/Desktop/hw6/src/components/Output.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport SavedWords from \"./SavedWords\";\nimport RhymeButton from \"./RhymeButton\";\nimport SynonymsButton from \"./SynonymsButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OutputList = () => {\n  _s();\n\n  const [inputWords, setInputWords] = useState();\n  const [outputWord, setOutputWord] = useState();\n  const [savedWords, setSavedWords] = useState([]);\n\n  function groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if (typeof property !== 'function') {\n      const propName = property;\n\n      property = obj => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n\n    for (const object of objects) {\n      const groupName = property(object); //Make sure that the group exists\n\n      if (!groupedObjects.has(groupName)) {\n        groupedObjects.set(groupName, []);\n      }\n\n      groupedObjects.get(groupName).push(object);\n    } // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n\n\n    const result = {};\n\n    for (const key of Array.from(groupedObjects.keys()).sort()) {\n      result[key] = groupedObjects.get(key);\n    }\n\n    return result;\n  }\n\n  ;\n\n  function getDatamuseRhymeUrl(rel_rhy) {\n    return `https://api.datamuse.com/words?${new URLSearchParams({\n      'rel_rhy': inputWords\n    }).toString()}`;\n  }\n\n  const datamuseRequest = (url, callback) => {\n    setOutputWord(() => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"...Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 20\n      }, this);\n    });\n    fetch(url).then(response => response.json()).then(data => {\n      // This invokes the callback that updates the page.\n      callback(data);\n    }, err => {\n      console.error(err);\n    });\n  };\n\n  function generateWords(term) {\n    console.log(\"0000\", term);\n    const wordlist = term.map(words => {\n      // console.log(\"wwww\",words.word);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [words.word, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addToSavedWords(words.word),\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          children: \"(save)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 59\n        }, this), \" \"]\n      }, \"wd\" + words.word, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this);\n    });\n    return wordlist;\n  }\n\n  const rhyme = result => {\n    // console.log(\"reult here!!!\",result);\n    const groupOutput = groupBy(result, \"numSyllables\"); // console.log(\"!!!!\",Object.entries(groupOutput));\n\n    const wordToShow = [];\n\n    if (result.length !== 0) {\n      wordToShow.push( /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Words that rhyme with \", inputWords, \": \"]\n      }, \"title\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }, this));\n      Object.entries(groupOutput).map((_ref, index) => {\n        let [numSyllables, items] = _ref;\n        // console.log(\"@@@@\",items);\n        wordToShow.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Syllables: \", numSyllables, \" \"]\n          }, 'title' + index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: generateWords(items)\n          }, 'ul' + index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this));\n      });\n    } else {\n      wordToShow.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"(no results)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }, this));\n    }\n\n    setOutputWord(wordToShow);\n  };\n\n  function addToSavedWords(item) {\n    setSavedWords(previousList => {\n      // console.log(previousList)\n      return [...previousList, item];\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(SavedWords, {\n        savedWords: savedWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group col\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          placeholder: \"Enter a word\",\n          onChange: e => {\n            setInputWords(e.target.value); // console.log(e.target.value);\n          },\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              // console.log(inputWords);\n              // console.log(`https://api.datamuse.com/words?rel_rhy=${inputWords}`);\n              datamuseRequest(getDatamuseRhymeUrl(inputWords), rhyme);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RhymeButton, {\n          inputWords: inputWords,\n          rhyme: rhyme,\n          datamuseRequest: datamuseRequest,\n          getDatamuseRhymeUrl: getDatamuseRhymeUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SynonymsButton, {\n          inputWords: inputWords,\n          datamuseRequest: datamuseRequest,\n          generateWords: generateWords,\n          setOutputWord: setOutputWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"col\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output row\",\n      children: /*#__PURE__*/_jsxDEV(\"output\", {\n        className: \"col\",\n        children: outputWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(OutputList, \"JiTLL+FrO2RaOeKDRS7gc7r3TjI=\");\n\n_c = OutputList;\nexport default OutputList;\n\nvar _c;\n\n$RefreshReg$(_c, \"OutputList\");","map":{"version":3,"sources":["/Users/wenjiewu/Desktop/hw6/src/components/Output.js"],"names":["useState","SavedWords","RhymeButton","SynonymsButton","OutputList","inputWords","setInputWords","outputWord","setOutputWord","savedWords","setSavedWords","groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","key","Array","from","keys","sort","getDatamuseRhymeUrl","rel_rhy","URLSearchParams","toString","datamuseRequest","url","callback","fetch","then","response","json","data","err","console","error","generateWords","term","log","wordlist","map","words","word","addToSavedWords","rhyme","groupOutput","wordToShow","length","Object","entries","index","numSyllables","items","item","previousList","e","target","value"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport SavedWords from \"./SavedWords\"\nimport RhymeButton from \"./RhymeButton\"\nimport SynonymsButton from \"./SynonymsButton\"\n\nconst OutputList = () => {\n    const [inputWords, setInputWords] = useState();\n    const [outputWord, setOutputWord] = useState();\n    const [savedWords, setSavedWords] = useState([]);\n\n    function groupBy(objects, property){\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if(typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for(const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if(!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    };\n\n    function getDatamuseRhymeUrl(rel_rhy) {\n        return `https://api.datamuse.com/words?${(new URLSearchParams({'rel_rhy': inputWords})).toString()}`;\n    }\n\n    const datamuseRequest = (url, callback) => {\n        setOutputWord(()=>{\n            return <p>...Loading</p>\n        });\n        fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                // This invokes the callback that updates the page.\n                callback(data);\n            }, (err) => {\n                console.error(err);\n            });\n    };\n\n\n\n    function generateWords(term) {\n        console.log(\"0000\",term);\n        const wordlist = term.map((words)=>{\n            // console.log(\"wwww\",words.word);\n            return <li key={\"wd\"+words.word}>{words.word} <button onClick={()=>addToSavedWords(words.word)} type=\"button\" className=\"btn btn-secondary\">(save)</button> </li>\n        });\n        return wordlist;\n    }\n\n\n    const rhyme = (result) => {\n        // console.log(\"reult here!!!\",result);\n        const groupOutput = groupBy(result,\"numSyllables\");\n        // console.log(\"!!!!\",Object.entries(groupOutput));\n        const wordToShow = [];\n        if (result.length !== 0) {\n            wordToShow.push(<h2 key=\"title\">Words that rhyme with {inputWords}: </h2>);\n            Object.entries(groupOutput).map(([numSyllables,items],index)=>{\n                // console.log(\"@@@@\",items);\n                wordToShow.push(\n                    <div key={index}>\n                        <h3 key={'title'+index}>Syllables: {numSyllables} </h3>\n                        <ul key={'ul'+index}>\n                            {generateWords(items)}\n                        </ul>\n                    </div>\n                )\n            })\n        } else {\n            wordToShow.push(<p>(no results)</p>);\n        }\n        setOutputWord(wordToShow);\n    };\n\n    function addToSavedWords(item) {\n        setSavedWords((previousList)=> {\n            // console.log(previousList)\n            return [...previousList,item]\n        })\n    };\n\n    return (\n        <>\n            <div className=\"row\">\n                <SavedWords savedWords={savedWords}/>\n            </div>\n            <div className=\"row\">\n                <div className=\"input-group col\">\n                    <input className=\"form-control\" type=\"text\" placeholder=\"Enter a word\"\n                           onChange={(e)=>{\n                               setInputWords(e.target.value);\n                               // console.log(e.target.value);\n                           }}\n\n                           onKeyDown={(e) => {\n                               if (e.key===\"Enter\"){\n                                   // console.log(inputWords);\n                                   // console.log(`https://api.datamuse.com/words?rel_rhy=${inputWords}`);\n                                   datamuseRequest(getDatamuseRhymeUrl(inputWords),rhyme);\n                               }}}\n                    />\n                    <RhymeButton\n                        inputWords={inputWords}\n                        rhyme={rhyme}\n                        datamuseRequest={datamuseRequest}\n                        getDatamuseRhymeUrl={getDatamuseRhymeUrl}\n                    />\n                    <SynonymsButton\n                        inputWords={inputWords}\n                        datamuseRequest={datamuseRequest}\n                        generateWords={generateWords}\n                        setOutputWord={setOutputWord}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <h2 className=\"col\"></h2>\n            </div>\n            <div className=\"output row\">\n                <output className=\"col\">{outputWord}</output>\n            </div>\n        </>\n    )\n}\n\nexport default OutputList;"]},"metadata":{},"sourceType":"module"}